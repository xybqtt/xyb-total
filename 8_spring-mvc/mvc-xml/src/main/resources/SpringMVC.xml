<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描包 -->
    <context:component-scan base-package="com.atguigu.mvc"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
        当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示，但需要添加<mvc:annotation-driven>注解，要不然所有的控制器中的请求映射将失效
    -->
    <!-- <mvc:view-controller path="/" view-name="A1Index"></mvc:view-controller>-->
    <mvc:view-controller path="/restFul/toAdd" view-name="restful/AddUser" />
    <!-- 测试 获取 http请求参数 -->
    <mvc:view-controller path="/a3ParamGet" view-name="A3ParamGet" />
    <!-- 测试 域对象共享数据 -->
    <mvc:view-controller path="/a4ScopeData" view-name="A4ScopeData" />
    <!-- 测试转发和重定向 -->
    <mvc:view-controller path="/a5ForwardAndRedirect" view-name="A5ForwardAndRedirect" />
    <!-- 测试RESTful风格 -->
    <mvc:view-controller path="/a6RestFulShow" view-name="A6RestFulShow" />
    <!-- 测试@RequestBody、RequestEntity、@ResponseBody、ResponseEntity的使用 -->
    <mvc:view-controller path="/a7HttpReqAndResp" view-name="A7HttpReqAndResp" />
    <!-- 文件上下载 -->
    <mvc:view-controller path="/a8FileUpAndDown" view-name="A8FileUpAndDownLod" />
    <!-- 拦截器测试 -->
    <mvc:view-controller path="/a9Interceptor" view-name="A9Interceptor" />
    <!-- 异常跳转测试 -->
    <mvc:view-controller path="/a10Exception" view-name="A10Exception" />

    <!--
      处理静态资源，例如html、js、css、jpg
      若只设置该标签，则只能访问静态资源，其他请求则无法访问
      此时必须设置<mvc:annotation-driven/>解决问题
     -->
    <mvc:default-servlet-handler/>

    <!-- 开启mvc注解驱动 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 文件上载需要注入的bean，必须通过文件解析器的解析才能将文件转换为MultipartFile对象，id必须是multipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>


    <!-- 添加拦截器方式1 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 设置对哪些请求进行拦截 -->
            <mvc:mapping path="/**"/>
            <!-- 设置对哪些请求不拦截 -->
            <mvc:exclude-mapping path="/testRequestEntity/user"/>
            <!-- 哪个拦截器处理 -->
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>
        <mvc:interceptor>
            <!-- 设置对哪些请求进行拦截 -->
            <mvc:mapping path="/**"/>
            <!-- 设置对哪些请求不拦截 -->
            <mvc:exclude-mapping path="/testRequestEntity/user"/>
            <!-- 哪个拦截器处理 -->
            <ref bean="secondInterceptor"></ref>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 添加拦截器方式2 -->
<!--    <mvc:interceptors>-->
<!--        <ref bean="secondInterceptor"></ref>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--    </mvc:interceptors>-->

    <!-- 配置出现的异常与对应跳转的页面 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--
                    properties的键表示处理器方法执行过程中出现的异常
                    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
                -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--
            exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享
        -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>
</beans>