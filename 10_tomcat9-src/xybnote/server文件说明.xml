<?xml version="1.0" encoding="UTF-8"?>

<!--
    server.xml位于$TOMCAT_HOME/conf目录下，是整个配置文件的根元素。
    Server元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。
    一个Server元素中可以有一个或多个Service元素。
    属性：
        port：表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。
        shutdown：表示关闭Server的指令。

    Server的主要任务：
        1、提供一个接口让客户端能够访问到这个Service集合；
        2、同时维护它所包含的所有的Service的生命周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。
-->
<Server port="8005" shutdown="SHUTDOWN">
    <!--
        Listener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。
         监听器可以在Server、Engine、Host或Context，但下面这6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。

        属性：
            className：监听器需要配置的最重要的属性，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。
    -->
    <!-- VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。 -->
    <Listener className="org.apache.catalina.startup.VersionLoggerListener"/>
    <!-- AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。 -->
    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on"/>
    <!-- JasperListener：在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。 -->
    <Listener className="org.apache.catalina.core.JasperListener" />
    <!-- JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。 -->
    <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>
    <!--  -->
    <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>
    <!--
        ThreadLocalLeakPreventionListener：当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当Web应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。
    -->
    <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>

    <!--
        GlobalNamingResources元素定义了全局资源，通过配置可以看出，该配置是通过读取{$TOMCAT_HOME}/conf/tomcat-users.xml实现的。
    -->
    <GlobalNamingResources>
        <Resource name="UserDatabase" auth="Container"
                  type="org.apache.catalina.UserDatabase"
                  description="User database that can be updated and saved"
                  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                  pathname="conf/tomcat-users.xml"/>
    </GlobalNamingResources>

    <!--
         Service代表一个Engine元素以及一组与之相连的Connector元素。
         因为不是一个Servlet容器，不能在此层级写 Valves(阀门)。
         作用：组装一个Engine和多个Connector对外提供服务，。一个Service可以包含多个Connector，但是只能包含一个Engine；其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。
         Tomcat可以提供多个Service，不同的Service监听不同的端口。
     -->
    <Service name="Catalina">

        <!--
            执行器定义tomcat各组件之间共享的线程池。
            在以前，每个connector都会独自创建自己的线程池.
            但现在，可以定义一个线程池，各组件都可以共享该线程池，不过主要是为各connector之间提供共享。
            注意，executor创建的是共享线程池，如果某个connector不引用executor创建的线程池，那么该connector仍会根据自己指定的属性创建它们自己的线程池。
            连接器必须要实现org.apache.catalina.Executor接口，它是一个嵌套在service组件中的元素，为了挑选所使用的connector，该元素还必须定义在connector元素之前。

            组件属性：
                其中该组件的属性有：
                    className：用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Executor。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardThreadExecutor；
                    name：该线程池的名称，其他组件需要使用该名称引用该线程池。

                标准类的属性包括：
                    threadPriority：线程优先级，默认值为5。
                    daemon：线程是否以daemon的方式运行，默认值为true。
                    namePrefix：执行器创建每个线程时的名称前缀，最终线程的名称为:namePrefix+threadNumber。
                    maxThreads：线程池激活的最大线程数量。默认值为200。
                    minSpareThreads：线程池中最少空闲的线程数量。默认值为25。
                    maxIdleTime：在空闲线程关闭前的毫秒数。除非激活的线程数量小于或等于minSpareThreads的值，否则会有空闲线程的出现。默认值为60000，即空闲线程需要保留1分钟的空闲时间才被杀掉。
                    maxQueueSize：可执行任务的最大队列数，达到队列上限时的连接请求将被拒绝。
                    prestartminSpareThreads：在启动executor时是否立即创建minSpareThreads个线程数，默认为false，即在需要时才创建线程。
        -->
        <Executor name="tomcatThreadPool"
                  className="org.apache.catalina.core.StandardThreadExecutor"
                  namePrefix="catalina-exec-"
                  maxThreads="150"
                  minSpareThreads="4"/>


        <!--
            代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。
            Connector的主要功能，是接收连接请求，创建Request和Response对象用于和请求端交换数据；然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。
            通过配置Connector，可以控制请求Service的协议及端口号。

            属性：
                port：客户端可以通过8080访问此tomcat；
                protocol：交互的协议，如HTTP/1.1、AJP/1.3，当然也可以传入具体的处理类的全限定名设置BIO、NIO、APR等，在源码
                    org.apache.catalina.connector.Connector {
                        public Connector(String protocol) {
                            ProtocolHandler p = ProtocolHandler.create(protocol, apr) {
                                // 可看到如果不是HTTP/1.1、AJP/1.3，且不为空，则会根据此属性配置的全限定名类去处理。
                                // 有哪些类型可以查看AbstractProtocol的子类，也可以自定义。
                                Class<?> clazz = Class.forName(protocol);
                            }
                        }
                    }
                connectionTimeout：超时时间；
                redirectPort：当用户用http请求某个资源，而该资源本身又被设置了必须要https方式访问，此时Tomcat会自动重定向到这个redirectPort设置的https端口。
                executor：表示此连接器自己不创建线程池，而使用name = "tomcatThreadPool"的Executor程池，这样多个connector可以使用同一个连接池，如果没配置此属性，则此连接器会创建自己连接池。

        -->
        <Connector port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443"/>

        <!--
            Engine、Host和Context都是容器，容器的功能是处理Connector接收进来的请求，并产生相应的响应。但它们不是平行的关系，而是父子关系：
                Engine包含Host，Host包含Context。
                一个Engine组件可以处理Service中的所有请求，
                一个Host组件可以处理发向一个特定虚拟主机的所有请求，
                一个Context组件可以处理一个特定Web应用的所有请求。

            Engine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。

            属性：
                name：用于日志和错误信息，在整个Server中应该唯一；
                defaultHost：指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理；因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。
         -->
        <Engine name="Catalina" defaultHost="localhost">

            <!--
                Realm，可以把它理解成“域”；Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置。

                具体查看Realm的使用  https://www.cnblogs.com/xing901022/p/4552843.html
            -->
            <Realm className="org.apache.catalina.realm.LockOutRealm">
                <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                       resourceName="UserDatabase"/>
            </Realm>

            <!--
                Host是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。

                作用：
                    Host虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用；
                    Host组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。
                    客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。

                属性：
                    name：指定虚拟主机的主机名，一个Engine中有且仅有一个Host组件的name属性与Engine组件的defaultHost属性相匹配；一般情况下，主机名需要是在DNS服务器中注册的网络名，但是Engine指定的defaultHost不需要，原因在前面已经说明。
                    unpackWARs：指定了是否将代表Web应用的WAR文件解压；true，通过解压后的文件结构运行该Web应用，false，直接使用WAR文件运行Web应用。
                    autoDeploy：true代表Tomcat在运行时定期检查新的Web应用或Web应用的更新，触发应用的部署。
                    deployOnStartup：true代表Tomcat在启动时检查Web应用，进行部署，且检测到的所有Web应用视作新应用。
                    appBase：autoDeploy、deployOnStartup会检查是否有新的Web应用或Web应用的更新，此属性代表了要去哪个目录进行这个检测。默认值是webapps，这是一个相对路径，代表Tomcat根目录下webapps文件夹。
                    xmlBase：指定Web应用的XML配置文件所在的目录，默认值为conf/<engine_name>/<host_name>，例如第一部分的例子中，主机localhost的xmlBase的默认值是$TOMCAT_HOME/conf/Catalina/localhost

                检查Web应用更新：
                    一个Web应用有3种形式：XML配置文件、WAR包、war包解压后的目录；其中XML配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。
                    Tomcat按照如下的顺序进行扫描，来检查应用更新：
                    1、扫描虚拟主机指定的xmlBase下的XML配置文件
                    2、扫描虚拟主机指定的appBase下的WAR文件
                    3、扫描虚拟主机指定的appBase下的应用目录
             -->
            <Host name="localhost" appBase="webapps"
                  unpackWARs="true" autoDeploy="true">

                <!--
                    Context的作用：
                        1、代表在特定Host上运行的一个具体的Web应用，每个Web应用基于WAR文件，或WAR文件解压后对应的目录(这里称为应用目录)。
                        Context是Host的子容器，每个Host中可以定义任意多的Context元素。
                        默认server.xml配置文件中并没有出现Context元素的配置。
                        这是因为，Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署。下面介绍一下Tomcat自动部署Web应用的机制。


                    属性：
                        docBase：指定了该Web应用使用的WAR包路径，或应用目录，这个context代表运行哪个web应用。需要注意的是，在自动部署场景下，docBase不在appBase目录中，才需要指定；如果docBase指定的WAR包或应用目录就在appBase中，则不需要指定，因为Tomcat会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。

                        path：指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理。
                        但是，需要注意的是，在自动部署场景下，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””。

                        reloadable：指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。在开发环境下，reloadable设置为true便于调试；但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。


                    server.xml中静态部署Web应用：
                        除了自动部署，我们也可以在server.xml中通过<Context>元素静态部署Web应用。静态部署与自动部署是可以共存的。在实际应用中，并不推荐使用静态部署，因为server.xml 是不可动态重加载的资源，服务器一旦启动了以后，要修改这个文件，就得重启服务器才能重新加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。

                        docBase：静态部署时，docBase可以在appBase目录下，也可以不在；本例中，docBase不在appBase目录下。

                        path：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。

                        reloadable属性的用法与自动部署时相同。
                -->
                <Context path="/" docBase="D:\Program Files \app1.war" reloadable="true"/>

                <!--
                    阀门：在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。

                    不同的Valve有不同的特性，下面介绍一下AccessLogValve。
                    AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。AccessLogValve可以与Engine、Host或Context关联；在本例中，只有一个Engine，Engine下只有一个Host，Host下只有一个Context，因此AccessLogValve放在三个容器下的作用其实是类似的。

                    属性：
                        className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。
                        directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。
                        prefix：指定了日志文件的前缀。
                        suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录下，可以看到如下所示的日志文件。
                        最终日志会在：$TOMCAT_HOME/logs/prefix.yyyy-mm-dd.suffix中存储
                        pattern：指定记录日志的格式，本例中各项的含义如下：
                            %h：远程主机名或IP地址；如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。后面远程的含义与之类似，不再解释。
                            %l：远程逻辑用户名，一律是”-”，可以忽略。
                            %u：授权的远程用户名，如果没有，则是”-”。
                            %t：访问的时间。
                            %r：请求的第一行，即请求方法(get/post等)、uri、及协议。
                            %s：响应状态，200,404等等。
                            %b：响应的数据量，不包括请求头，如果为0，则是””-。
                            %D：请求处理的时间(单位是毫秒)，对于统计分析请求的处理速度帮助很大。

                            开发人员可以充分利用访问日志，来分析问题、优化应用。例如，分析访问日志中各个接口被访问的比例，不仅可以为需求和运营人员提供数据支持，还可以使自己的优化有的放矢；分析访问日志中各个请求的响应状态码，可以知道服务器请求的成功率，并找出有问题的请求；分析访问日志中各个请求的响应时间，可以找出慢请求，并根据需要进行响应时间的优化。
                -->
                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                       prefix="localhost_access_log" suffix=".txt"
                       pattern="%h %l %u %t &quot;%r&quot; %s %b"/>

            </Host>
        </Engine>
    </Service>
</Server>
