<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- context-param是上下文参数(属于整个web工程)，可以设置多个 -->
    <context-param>
        <param-name>username</param-name>
        <param-value>context</param-value>
    </context-param>
    <context-param>
        <param-name>password</param-name>
        <param-value>root</param-value>
    </context-param>

    <!-- 一、Servlet程序 -->
    <!-- servlet标签给tomcat配置servlet -->
    <servlet>
        <!-- servlet-name：给servlet程序起一个别名 -->
        <servlet-name>LifeOfServlet1</servlet-name>
        <!-- servlet-class：是servlet程序的全限定名 -->
        <servlet-class>com.xyb.servlet.A1LifeOfServlet</servlet-class>
        <!-- init-param是初始化参数，可配置多个 -->
        <init-param>
            <!-- 是参数名 -->
            <param-name>url</param-name>
            <!-- 是参数值 -->
            <param-value>jdbc:mysql://localhost:3306/test</param-value>
        </init-param>
        <init-param>
            <!-- 是参数名 -->
            <param-name>param2</param-name>
            <!-- 是参数值 -->
            <param-value>value2</param-value>
        </init-param>
        <!-- 在tomcat部署项目时就对此类实例化，优先级越小越优先，只能放在servlet标签最下面 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- servlet-mapping标签给servlet程序配置访问地址 -->
    <servlet-mapping>
        <!-- servlet-name：此标签的作用是告诉服务器，我当前配置的地址是给哪个名叫此标签值的servlet使用 -->
        <servlet-name>LifeOfServlet1</servlet-name>
        <!--
            url-pattern：标签配置访问地址
            /：表示服务器在解析的时候，地址为http://ip:port/工程路径
            /hello：表示地址为 http://ip:port/工程路径/hello
         -->
        <url-pattern>/lifeOfServlet1</url-pattern>
    </servlet-mapping>


    <!-- 访问HelloHttpServlet2 -->
    <servlet>
        <servlet-name>HelloHttpServlet2</servlet-name>
        <servlet-class>com.xyb.servlet.A2HelloHttpServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloHttpServlet2</servlet-name>
        <url-pattern>/helloHttpServlet2</url-pattern>
    </servlet-mapping>

    <!-- 这个是使用idea生成的servlet，会自动创建servlet标签，但不会创建servlet-mapping标签，因为它不知道你准备的url-pattern叫什么 -->
    <servlet>
        <servlet-name>IdeaGenerateServlet3</servlet-name>
        <servlet-class>com.xyb.servlet.A3IdeaGenerateServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>IdeaGenerateServlet3</servlet-name>
        <url-pattern>/ideaGenerateServlet3</url-pattern>
    </servlet-mapping>



    <!-- ServletContext：Servlet上下文的使用 -->
    <servlet>
        <servlet-name>ContextServlet4</servlet-name>
        <servlet-class>com.xyb.servlet.A4ContextServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ContextServlet4</servlet-name>
        <url-pattern>/contextServlet4</url-pattern>
    </servlet-mapping>

    <!-- HttpServletRequest的使用 -->
    <servlet>
        <servlet-name>RequestApiServlet5</servlet-name>
        <servlet-class>com.xyb.servlet.A5RequestApiServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestApiServlet5</servlet-name>
        <url-pattern>/requestApiServlet5</url-pattern>
    </servlet-mapping>


    <!-- 测试请求转发 -->
    <servlet>
        <servlet-name>RequestForwardServlet6</servlet-name>
        <servlet-class>com.xyb.servlet.A6RequestForwardServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestForwardServlet6</servlet-name>
        <url-pattern>/requestForwardServlet6</url-pattern>
    </servlet-mapping>


    <!-- HttpServletResponse的使用 -->
    <servlet>
        <servlet-name>ResponseApiServlet7</servlet-name>
        <servlet-class>com.xyb.servlet.A7ResponseApiServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ResponseApiServlet7</servlet-name>
        <url-pattern>/responseApiServlet7</url-pattern>
    </servlet-mapping>

    <!-- 测试重定向 -->
    <servlet>
        <servlet-name>RedirectServlet8</servlet-name>
        <servlet-class>com.xyb.servlet.A8RedirectServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RedirectServlet8</servlet-name>
        <url-pattern>/redirectServlet8</url-pattern>
    </servlet-mapping>


    <!-- 测试文件上传下载 -->
    <servlet>
        <servlet-name>FileUpdownload9</servlet-name>
        <servlet-class>com.xyb.servlet.A9FileUpdownload</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>FileUpdownload9</servlet-name>
        <url-pattern>/fileUpdownload9</url-pattern>
    </servlet-mapping>


    <!-- Cookie的使用 -->
    <servlet>
        <servlet-name>CookieServlet10</servlet-name>
        <servlet-class>com.xyb.servlet.A10CookieServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CookieServlet10</servlet-name>
        <url-pattern>/cookieServlet10</url-pattern>
    </servlet-mapping>


    <!-- Session的使用 -->
    <servlet>
        <servlet-name>SessionServlet11</servlet-name>
        <servlet-class>com.xyb.servlet.A11SessionServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SessionServlet11</servlet-name>
        <url-pattern>/sessionServlet11</url-pattern>
    </servlet-mapping>

    <!-- Json的使用 -->
    <servlet>
        <servlet-name>JsonServlet12</servlet-name>
        <servlet-class>com.xyb.servlet.A12JsonServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>JsonServlet12</servlet-name>
        <url-pattern>/jsonServlet12</url-pattern>
    </servlet-mapping>

    <!-- ajax的使用 -->
    <servlet>
        <servlet-name>AjaxServlet13</servlet-name>
        <servlet-class>com.xyb.servlet.A13AjaxServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AjaxServlet13</servlet-name>
        <url-pattern>/ajaxServlet13</url-pattern>
    </servlet-mapping>


    <!-- 二、Listener监听器 -->
    <!-- 只要把监听实现类配置在这儿即可实现监听 -->
    <listener>
        <listener-class>com.xyb.listener2.MyServletContextListener</listener-class>
    </listener>


    <!-- 三、Filter过滤器 -->
    <!-- 只要把监听实现类配置在这儿即可实现监听 -->
    <filter>
        <!-- 给filter起一个别名，与filter-mapping和filter-name一样 -->
        <filter-name>MyFilter</filter-name>
        <!-- 具体的拦截类 -->
        <filter-class>com.xyb.filter3.MyFilter</filter-class>
        <init-param>
            <param-name>filterKey1</param-name>
            <param-value>filterValue1</param-value>
        </init-param>
        <init-param>
            <param-name>filterKey2</param-name>
            <param-value>filterValue2</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <!-- 与filter-name为此的filter匹配 -->
        <filter-name>MyFilter</filter-name>
        <!--
            url-pattern配置拦截路径
            /表示http://ip:port/工程路径 映射idea的web目录
            /*：表示请求地址为:http://ip:port/工程路径/*
        -->
        <url-pattern>/testFilterServlet</url-pattern>
    </filter-mapping>


    <!-- 测试请求一个资源需要经过多个过滤器的功能 -->
    <filter>
        <filter-name>MyFilter2</filter-name>
        <filter-class>com.xyb.filter3.MyFilter2</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>MyFilter2</filter-name>
        <url-pattern>/testFilterServlet</url-pattern>
    </filter-mapping>

    <!-- 测试过滤器功能 -->
    <servlet>
        <servlet-name>TestFilterServlet</servlet-name>
        <servlet-class>com.xyb.filter3.TestFilterServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>TestFilterServlet</servlet-name>
        <url-pattern>/testFilterServlet</url-pattern>
    </servlet-mapping>



</web-app>