<?xml version="1.0" encoding="UTF-8" ?>
<!-- 指定约束文件，mybatis-3-mapper是约束文件名称 -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    select：查询操作
        parameterType属性：接口中方法参数的数据类型，值是java中的数据类型的全限定名，有别名，从
            mybatis的官网查询，如parameterType="java.util.Integer"，或"int"，
            注意，这个属性不是必须写的，mybatis通过反射机制能够发现接口参数的数据类型

    用参数给sql赋值，用的是#{方法属性名}，本质相当于PreparedStatement中的'?'。
    #和$的区别：
        #：占位符，告诉mybatis使用实际的参数值替代，并使用PrepareStatement对象执行sql，
            更安全。
            如#{id}=5，则SELECT * FROM a WHERE id=?。
            效率高、避免sql注入
        $：字符串替换，告诉mybatis用${}包含的"字符串"替换所在停车场，使用Statement把
            sql语句和${}中的内容连接起来，主要用在替换表名、列名、不同列列排序等操作。
            如果比如SELECT * FROM a WHERE #{id}=5，操作无法写出这样的sql，${}就可以。
            如${id}=5，则SELECT * FROM a WHERE id=5，是直接拼接好的。
            并且name=时，${name}应该是'李四'而不是李四。
     -->
<mapper namespace="com.xyb.dao.FnParamDao">

    <!-- 单个简单参数传递 -->
    <select id="getDataById" parameterType="java.lang.Integer" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE id = #{id}
    </select>

    <!-- 多个简单参数传递，接口中用@Param注解，那么就可以根据注解和#{}中间的匹配 -->
    <select id="getDataByIdAndType" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE id = #{id} AND type = #{type}
    </select>

    <!-- 使用对象传递参数，用对象的属性值传递数据，
        完整格式是：#{属性名, javaType=类型名, jdbcType=数据类型}，很少用
        javaType：指java中的属性数据类型；
        jdbcType：在数据库中的数据类型；
        例：#{paramName, javaType=java.lang.String, jdbcType=VARCHAR}
        简化方式为#{属性名}
    -->
    <select id="getDataByObj" parameterType="com.xyb.entity.FnParam" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE id = #{id, javaType=java.lang.Integer, jdbcType=INTEGER}
        AND type = #{type}
    </select>

    <!--
        根据参数位置传递参数，
        在3.4之前，是#{0}, #{1}
        3.4之后，是#{arg0}, #{arg1}
    -->
    <select id="getDataByLoc" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE id = #{arg0} AND type = #{arg1}
    </select>


    <!--
        使用map，则#{key}
    -->
    <select id="getDataByMap" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE id = #{id} AND type = #{type}
    </select>

    <!-- 测试${} -->
    <select id="getDataTest$" resultType="com.xyb.entity.FnParam">
      SELECT *
      FROM fnParam
      WHERE ${colName} = #{id} AND type = #{type}
    </select>
</mapper>